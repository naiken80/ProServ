generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Organization {
  id           String        @id @default(cuid())
  name         String
  timezone     String        @default("UTC")
  currency     String        @default("USD")
  projects     Project[]
  rateCards    RateCard[]
  roles        Role[]
  users        User[]
  connectors   Connector[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  givenName      String
  familyName     String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  roles          UserRole[]
  createdProjects Project[]     @relation("ProjectCreatedBy")
  lockedVersions EstimateVersion[] @relation("VersionLockedBy")
  approvals      Approval[]
  comments       Comment[]     @relation("UserComments")
  activityEvents ActivityEvent[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
}

model Role {
  id             String         @id @default(cuid())
  code           String
  name           String
  description    String?
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  rateCardEntries RateCardRole[]
  assignments    Assignment[]
  userRoles      UserRole[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  archivedAt     DateTime?

  @@unique([organizationId, code])
}

model RateCard {
  id             String        @id @default(cuid())
  name           String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  currency       String
  validFrom      DateTime?
  validTo        DateTime?
  entries        RateCardRole[]
  versions       EstimateVersion[]
  baselineProjects Project[]    @relation("ProjectBaselineRateCard")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model RateCardRole {
  id         String   @id @default(cuid())
  rateCard   RateCard @relation(fields: [rateCardId], references: [id])
  rateCardId String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  currency   String
  billRate   Decimal  @db.Decimal(12, 2)
  costRate   Decimal  @db.Decimal(12, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([rateCardId, roleId, currency])
}

model FxRate {
  id            String  @id @default(cuid())
  baseCurrency  String
  quoteCurrency String
  rate          Decimal @db.Decimal(18, 6)
  asOf          DateTime
  version       EstimateVersion? @relation("EstimateVersionFxRates", fields: [versionId], references: [id])
  versionId     String?
  createdAt     DateTime @default(now())

  @@unique([baseCurrency, quoteCurrency, asOf])
}

model Project {
  id             String        @id @default(cuid())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  clientName     String
  name           String
  baseCurrency   String
  startDate      DateTime
  endDate        DateTime?
  billingModel   BillingModel
  baselineRateCard   RateCard?     @relation("ProjectBaselineRateCard", fields: [baselineRateCardId], references: [id])
  baselineRateCardId String?
  status         ProjectStatus @default(DRAFT)
  versions       EstimateVersion[]
  createdBy      User          @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  archivedAt     DateTime?
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum BillingModel {
  TIME_AND_MATERIAL
  FIXED_PRICE
  RETAINER
  MANAGED_SERVICE
}

model EstimateVersion {
  id             String               @id @default(cuid())
  project        Project              @relation(fields: [projectId], references: [id])
  projectId      String
  name           String
  versionNumber  Int                  @default(1)
  status         EstimateVersionStatus @default(DRAFT)
  description    String?
  rateCard       RateCard?            @relation(fields: [rateCardId], references: [id])
  rateCardId     String?
  fxSnapshot     Json
  workItems      WorkItem[]
  scenarios      Scenario[]
  approvals      Approval[]
  fxRates        FxRate[]       @relation("EstimateVersionFxRates")
  priceRules     PriceRule[]    @relation("EstimateVersionPriceRules")
  comments       Comment[]     @relation("EstimateVersionComments")
  activityEvents ActivityEvent[]
  lockedAt       DateTime?
  lockedBy       User?                @relation("VersionLockedBy", fields: [lockedById], references: [id])
  lockedById     String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@unique([projectId, versionNumber])
}

enum EstimateVersionStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  ARCHIVED
}

model WorkItem {
  id             String       @id @default(cuid())
  version        EstimateVersion @relation(fields: [versionId], references: [id])
  versionId      String
  parent         WorkItem?    @relation("WorkItemHierarchy", fields: [parentId], references: [id])
  parentId       String?
  children       WorkItem[]   @relation("WorkItemHierarchy")
  name           String
  type           WorkItemType
  startDate      DateTime?
  endDate        DateTime?
  durationDays   Int?
  sequence       Int          @default(0)
  assignments    Assignment[]
  adjustments    ScenarioAdjustment[]
  comments       Comment[]     @relation("WorkItemComments")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum WorkItemType {
  EPIC
  WORKSTREAM
  TASK
  MILESTONE
}

model Assignment {
  id             String    @id @default(cuid())
  workItem       WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId     String
  role           Role      @relation(fields: [roleId], references: [id])
  roleId         String
  resourceId     String?
  resourceName   String?
  allocationModel AllocationModel @default(HOURS)
  notes          String?
  plans          TimePhasedPlan[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([workItemId, roleId, resourceId])
}

enum AllocationModel {
  HOURS
  PERCENT_FTE
  FIXED_FEE
}

model TimePhasedPlan {
  id           String     @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  weekOf       DateTime
  hours        Decimal    @db.Decimal(8, 2)
  cost         Decimal    @db.Decimal(14, 2)
  bill         Decimal    @db.Decimal(14, 2)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([assignmentId, weekOf])
}

model Scenario {
  id            String         @id @default(cuid())
  version       EstimateVersion @relation(fields: [versionId], references: [id])
  versionId     String
  name          String
  description   String?
  status        ScenarioStatus @default(DRAFT)
  priceDelta    Decimal        @db.Decimal(14, 2) @default(0)
  costDelta     Decimal        @db.Decimal(14, 2) @default(0)
  durationDelta Int            @default(0)
  isPrimary     Boolean        @default(false)
  adjustments   ScenarioAdjustment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum ScenarioStatus {
  DRAFT
  REVIEWED
  APPROVED
  ARCHIVED
}

model ScenarioAdjustment {
  id         String    @id @default(cuid())
  scenario   Scenario  @relation(fields: [scenarioId], references: [id])
  scenarioId String
  workItem   WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId String
  adjustment Json
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([scenarioId, workItemId])
}

model PriceRule {
  id          String       @id @default(cuid())
  version     EstimateVersion @relation("EstimateVersionPriceRules", fields: [versionId], references: [id])
  versionId   String
  name        String
  ruleType    PriceRuleType
  configuration Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum PriceRuleType {
  DISCOUNT
  PREMIUM
  SURCHARGE
  FLOOR
}

model Approval {
  id         String        @id @default(cuid())
  version    EstimateVersion @relation(fields: [versionId], references: [id])
  versionId  String
  approver   User          @relation(fields: [approverId], references: [id])
  approverId String
  status     ApprovalStatus @default(PENDING)
  comments   String?
  decidedAt  DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Comment {
  id        String        @id @default(cuid())
  version   EstimateVersion @relation("EstimateVersionComments", fields: [versionId], references: [id])
  versionId String
  author    User          @relation("UserComments", fields: [authorId], references: [id])
  authorId  String
  workItem  WorkItem?     @relation("WorkItemComments", fields: [workItemId], references: [id])
  workItemId String?
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ActivityEvent {
  id        String        @id @default(cuid())
  version   EstimateVersion @relation(fields: [versionId], references: [id])
  versionId String
  actor     User?         @relation(fields: [actorId], references: [id])
  actorId   String?
  eventType String
  metadata  Json
  happenedAt DateTime     @default(now())
}

model Connector {
  id             String           @id @default(cuid())
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  provider       ConnectorProvider
  settings       Json
  status         ConnectorStatus @default(DISCONNECTED)
  lastSyncAt     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum ConnectorProvider {
  SERVICENOW
  NETSUITE
  SAP
  WORKDAY
  GENERIC
}

enum ConnectorStatus {
  DISCONNECTED
  CONNECTED
  ERROR
}
